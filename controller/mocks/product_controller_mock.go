// Code generated by MockGen. DO NOT EDIT.
// Source: controller/product_controller.go
//
// Generated by this command:
//
//	mockgen -source=controller/product_controller.go -destination=controller/mocks/product_controller_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/golang/mock/gomock"
	reflect "reflect"

	v2 "github.com/gofiber/fiber/v2"
)

// MockProductController is a mock of ProductController interface.
type MockProductController struct {
	ctrl     *gomock.Controller
	recorder *MockProductControllerMockRecorder
	isgomock struct{}
}

// MockProductControllerMockRecorder is the mock recorder for MockProductController.
type MockProductControllerMockRecorder struct {
	mock *MockProductController
}

// NewMockProductController creates a new mock instance.
func NewMockProductController(ctrl *gomock.Controller) *MockProductController {
	mock := &MockProductController{ctrl: ctrl}
	mock.recorder = &MockProductControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductController) EXPECT() *MockProductControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductController) Create(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductControllerMockRecorder) Create(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductController)(nil).Create), c)
}

// Delete mocks base method.
func (m *MockProductController) Delete(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductControllerMockRecorder) Delete(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductController)(nil).Delete), c)
}

// FindAll mocks base method.
func (m *MockProductController) FindAll(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockProductControllerMockRecorder) FindAll(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockProductController)(nil).FindAll), c)
}

// FindById mocks base method.
func (m *MockProductController) FindById(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindById indicates an expected call of FindById.
func (mr *MockProductControllerMockRecorder) FindById(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockProductController)(nil).FindById), c)
}

// Update mocks base method.
func (m *MockProductController) Update(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductControllerMockRecorder) Update(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductController)(nil).Update), c)
}
